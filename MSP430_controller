#include <msp430.h> 

unsigned int digits[10] = {0xdb, 0x50, 0x1f, 0x5d, 0xd4, 0xcd, 0xcf, 0xd8, 0xdf, 0xdd};
unsigned int speed = 0;
unsigned int data[4] = {0, };
unsigned int cnt = 0;
unsigned int click = 0;
unsigned int click2 = 0;
int encoder_cnt = 0;
unsigned long usec = 0;
unsigned int distance = 0;
unsigned int flag = 0;
unsigned int i = 0;
unsigned int key = 0;
unsigned int menu = 0;
unsigned int password = 0;

void main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	
	//p1.1 switch set
	P1OUT |= BIT1;
	P1REN |= BIT1;
	
	//p2.1 switch set
	P2OUT |= BIT1;
	P2REN |= BIT1;
	
	//LED set
	P1DIR |= BIT0;  //1.0 LED
	P1OUT &= ~BIT0;
	P4DIR |= BIT7;  //4.7 LED
	P4OUT &= ~BIT7;
	
	// 7- segment
	P3DIR |= 0xffff;
	P3OUT &= 0x0000;
	P4DIR |= 0x000f;
	P4OUT &= ~BIT0;

    //timer for segment
    TA0CCTL0 = CCIE;
	TA0CCR0 = 5000;
	TA0CTL = TASSEL_2 + MC_1 +TACLR;
	
	//timer1 for ultrasonic
	TA1CCTL0 = CCIE;
	TA1CCR0 = 50;      //50us
	TA1CTL = TASSEL_2 + MC_1 + TACLR;
	
	// PWM set	
	P2DIR |= (BIT5 | BIT4);
	P2SEL |= (BIT5 | BIT4);
	
	TA2CTL = TASSEL_2 + MC_1;
	TA2CCR0 = 1000;
	TA2CCTL2 = OUTMOD_6;
	TA2CCR2 = 0;
	TA2CCTL1 = OUTMOD_6;
	TA2CCR1 = 0; 
	
	//ADC set
	P6SEL |= BIT0;
	ADC12CTL0 = ADC12SHT02 + ADC12MSC + ADC12ON;
	ADC12CTL1 = ADC12SHP + ADC12CONSEQ_2;
	ADC12MCTL0 = ADC12INCH_0;
	ADC12CTL0 |= ADC12ENC;
	ADC12CTL0 |= ADC12SC;
	
	//interrupt set (encoder)
	P1IE |= BIT2;
	P1IES &= ~BIT2;
	P1IFG &= ~BIT2;
	
	P1IE |= BIT3;
	P1IES &= ~BIT3;
	P1IFG &= ~BIT3;
	
	// ultrasonic
	P2DIR |= BIT7;
	P2OUT &= ~BIT7;
	P1IE |= BIT4;
	P1IES &= ~BIT4;
	P1IFG &= ~BIT4;
	
	//keypad set
	P2DIR |= (BIT0 | BIT2 | BIT3);
	P2OUT |= (BIT0 | BIT2 | BIT3);
	
	P7REN |= (BIT0 | BIT4);
	P7OUT |= (BIT0 | BIT4);
	P8REN |= (BIT1 | BIT2);
	P8OUT |= (BIT1 | BIT2);
	
	__bis_SR_register(GIE);
	
	while(1)
	{
	    //keypad
	    //columns 1
	    P2OUT &= ~BIT2;
	    P2OUT |= (BIT0 | BIT3);
	    
	    if((P7IN & BIT0) == 0)
	    {
	        key = 1;
	    }
	    else if((P7IN & BIT4) == 0)
	    {
	        key = 4;
	    }
	    else if((P8IN & BIT1) == 0)
	    {
	        key = 7;
	    }
	    else if((P8IN & BIT2) == 0)
	    {
	        while((P8IN & BIT2) == 0) {}
	            key = 0;
	            menu++;
	    }
	    
	    //columns 2
	    P2OUT &= ~BIT0;
	    P2OUT |= (BIT2 | BIT3);
	    
	    if((P7IN & BIT0) == 0)
	    {
	        key = 2;
	    }
	    else if((P7IN & BIT4) == 0)
	    {
	        key = 5;
	    }
	    else if((P8IN & BIT1) == 0)
	    {
	        key = 8;
	    }
	    else if((P8IN & BIT2) == 0)
	    {
	        key = 0;
	    }
	    
	    //columns 3
	    P2OUT &= ~BIT3;
	    P2OUT |= (BIT0 | BIT2);
	    
	    if((P7IN & BIT0) == 0)
	    {
	        key = 3;
	    }
	    else if((P7IN & BIT4) == 0)
	    {
	        key = 6;
	    }
	    else if((P8IN & BIT1) == 0)
	    {
	        key = 9;
	    }
	    else if((P8IN & BIT2) == 0)
	    {
	        menu = 0;
	        key = 0;
	        for(i=0 ; i<4 ; i++)
	        {
	            data[i] = 0;
	        }
	    }
	    
	    //save key number
	    if(menu == 0)
	    {
	        data[3] = key;
	    }
	    else if(menu == 1)
	    {
	        data[2] = key;
	    }
	    else if(menu == 2)
	    {
	        data[1] = key;
	    }
	    else if(menu == 3)
	    {
	        data[0] = key;
	    }
	    else if(menu == 4)
	    {
	        menu = 0;
	        password = data[3]*1000 + data[2]*100 + data[1]*10 +data[0];
	        
	        if(password != 810)
	        {
	            for(i=0 ; i<4 ; i++)
	            {
	                data[i] = 0;
	            }
	            password = 0;
	        }
	    }
	    while(password == 810)
	    {
	    //p1.1 switch
	    if((P1IN & BIT1) == 0)
	    {
	        while((P1IN & BIT1) == 0){}
	        
	        
	        if(click > 3)   
	            click = 0;
	            
	        click++;
	        
	        if(click2 != 0)     //reset
	        {
	            click = 0;
	            click2 = 0;
	        }
	    }
	    
	   switch (click)
	   {
	       case 0 :         //clear
	           data[2] = 0;
	           data[1] = 0;
	           data[0] = 0;
	           TA2CCR2 = 0;
	           break;
	       case 1 :                                 
	           data[2] = (ADC12MEM0-1100)/300;
	           data[1] = 0;
	           data[0] = 0;
	           TA2CCR2 = 0;
	           break;
	       case 2 : 
	           data[1] = (ADC12MEM0-1100)/300;
	           TA2CCR2 = 0;
	           break;
	       case 3 :
	           data[0] = (ADC12MEM0-1100)/300;
	           TA2CCR2 = 0;
	           break;
	       case 4 :
	           speed = data[2]*100 + data[1]*10 + data[0];
	           TA2CCR2 = speed;      //counter clockwise
	   }
	   
	   //p2.1 switch
	    if((P2IN & BIT1) == 0)
	    {
	        while((P2IN & BIT1) == 0){}
	        
	        if(click2 > 2)   
	            click2 = 0;
	            
	        click2++;
	        
	        if(click != 0)      //reset
	        {
	            click = 0;
	            click2 = 0;
	        }
	    }
	    
	    switch (click2)
	   {
	       case 0 :
	       	   data[3] = 0;      //clear
	       	   TA2CCR1 = 0;
	       	   encoder_cnt = 0;
	           break;
	       case 1 :
	           data[3] = (ADC12MEM0-1100)/300;
	           break;
	       case 2 : 
	            P1IE |= BIT2;   //use encoder interrupt
	            P1IE |= BIT3;   
	           	while((encoder_cnt/670) != data[3])
	            {
	                TA2CCR1 = 350;      //clockwise
	            }
                encoder_cnt = 0;
                data[3] = 0;
	            TA2CCR1 = 0;
	            click2 = 1;
	            break;
	   }
	   
	   //mission2 + 3
	   while((click == 4) && (TA2CCR2 != 0))
	   {
	       P1IE &= ~BIT2;       //not use encoder interrupt
	       P1IE &= ~BIT3;
	       
	       if(flag == 0)
	       {
	            P2OUT |= BIT7;     //trig on
	            __delay_cycles(10);     //10us
	            P2OUT &= ~BIT7;     //trig off
	            flag = 1;
	       }
	       
	       data[3] = distance/1000%10;
	       data[2] = distance/100%10;
	       data[1] = distance/10%10;
	       data[0] = distance%10;
	       
	       if(distance < 15)    //stop
	       {
	           TA2CCR1 = speed;
	           TA2CCR2 = speed;
	       }
	       else
	       {
	           TA2CCR1 = 0;
	           TA2CCR2 = speed;
	       }
	       
	       //LED on/off    
	       if(TA2CCR1 == speed)
	       {
	           P1OUT |= BIT0;
	           P4OUT |= BIT7;
	       }
	       else
	       {
	           P1OUT &= ~BIT0;
	           P4OUT &= ~BIT7;
	       }
	       
	       //exit    
	       if((P2IN & BIT1) == 0)
	       {
	           while((P2IN & BIT1) == 0){}
	           P1OUT &= ~BIT0;
	           P4OUT &= ~BIT7;
	           click = 0;
	           click2 = 0;
	       }
	       if((P1IN & BIT1) == 0)
	       {
	           while((P1IN & BIT1) == 0){}
	           P1OUT &= ~BIT0;
	           P4OUT &= ~BIT7;
	           click = 1;          //maintain using click
	           click2 = 0;
	       }
	   } //while((click == 4) && (TA2CCR2 != 0))
	   } //while(password == 810)

	}
}

#pragma vector=TIMER0_A0_VECTOR
__interrupt void TIMER0_A0_ISR(void)
{
    cnt++;
    if(cnt > 3)
        cnt = 0;
        
    switch (cnt)
    {
        case 0:
            P3OUT = digits[data[0]];
            P4OUT = (~BIT0 & 0xf);
            break;
        case 1:
            P3OUT = digits[data[1]];
            P4OUT = (~BIT1 & 0xf);
            break;
        case 2:
            P3OUT = digits[data[2]];
            P4OUT = (~BIT2 & 0xf);
            break;
        case 3:
            P3OUT = digits[data[3]];
            P4OUT = (~BIT3 & 0xf);
            break;
    }
}

#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
    //encoder
    if(P1IFG & BIT3)
    {
        if((P1IN & BIT2) != 0)
        {
            encoder_cnt--;
        }
        else
        {
            encoder_cnt++;
        }
        
        if(encoder_cnt > 9999)
            encoder_cnt = 0;
        else if(encoder_cnt < 0)
            encoder_cnt = 9999;
            
        P1IFG &= ~BIT3;
    }
    
    if(P1IFG & BIT2)
    {
        if((P1IN & BIT3) == 0)
        {
            encoder_cnt--;
        }
        else
        {
            encoder_cnt++;
        }
        
        if(encoder_cnt > 9999)
            encoder_cnt = 0;
        else if(encoder_cnt < 0)
            encoder_cnt = 9999;
            
        P1IFG &= ~BIT2;
    }
    
    
    
    

    
    //ultrasonic
    if(P1IFG & BIT4)
    {
        if((P1IES & BIT4) == 0)
        {
            usec = 0;
            
            P1IES |= BIT4;
        }
        else if(P1IES & BIT4)
        {
            if(usec > 3 && usec < 500)
                distance = usec*50/58;
            else if(usec >= 760)
                distance = 9999;
            else
                distance = 0;
                
            P1IES &= ~BIT4;
        }
        P1IFG &= ~BIT4;
    }
    
}

#pragma vector=TIMER1_A0_VECTOR
__interrupt void TIMER1_A0_ISR(void)
{
    usec++;
    
    if(flag == 1 && usec > 1000)
    {
        flag = 0;
    }
}

